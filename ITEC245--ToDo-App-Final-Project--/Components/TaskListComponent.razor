@using ITEC245__ToDo_App_Final_Project__.Data;
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<table class="table">
    <!-- Boilerplate taken from bootstrap docs -->
    <thead>
        <tr>
            <th scope="col">Task ID</th>
            <th scope="col">Task Name</th>
            <th scope="col">Status</th>
            <th scope="col">Options</th>
        </tr>
    </thead>
    <tbody>
        <!-- Would like to add sorting, will need c# methods in code section -->
        <!--Use a component here that uses a list as a parameter-->
        @foreach (var task in _Tasks)
        {
            <tr>
                <th scope="row">@task.TaskId</th>
                <td>@task.TaskName</td>
                <td>@task.Status</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ViewDetails(task.TaskId)">View Details</button>
                    @if (_AddReport)
                    {
                        <button class="btn btn-primary ms-2" @onclick="() => AddReport(task.TaskId)">Add Report</button>
                    }
                    @if (_AssignToMe)
                    {
                        <button class="btn btn-primary ms-2" @onclick="() => AssignToMe(task.TaskId)">Assign to Me</button>
                    }
                    @if (_EditTask)
                    {
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <button class="btn btn-danger ms-2" @onclick="() => EditTask(task.TaskId)">Edit Task</button>
                            </Authorized>
                        </AuthorizeView>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<Models.Task> _Tasks { get; set; }
    [Parameter]
    public int _UserID { get; set; }

    [Parameter]
    public bool _AssignToMe { get; set; }
    [Parameter]
    public bool _EditTask { get; set; }
    [Parameter]
    public bool _AddReport { get; set; }

    private void ViewDetails(int taskId)
    {
        NavigationManager.NavigateTo($"/TaskDetails/{taskId}");
    }

    private void AddReport(int taskId)
    {
        NavigationManager.NavigateTo($"/TaskReport/{taskId}/{_UserID}");
    }

    private void AssignToMe(int taskId)
    {
        using (var context = new ToDoAppDbContext())
        {
            Models.TaskTeam assignToMe = new Models.TaskTeam();
            assignToMe.TaskID = taskId;
            assignToMe.UserID = _UserID;
            context.TaskTeams.Add(assignToMe);
            context.Tasks.FirstOrDefault(x => x.TaskId == taskId).Status = Models.Task.TaskProgress.NoProgress;
            context.SaveChanges();
        }
        NavigationManager.NavigateTo($"/MyTasks", true);
    }

    private void EditTask(int taskId)
    {
        NavigationManager.NavigateTo($"/TaskDetails/EditDetails/{taskId}");
    }
}