@using ITEC245__ToDo_App_Final_Project__.Models
@using ITEC245__ToDo_App_Final_Project__.Data
@using Microsoft.EntityFrameworkCore

@*@inject IJSRuntime JSRuntime //Needed to show browser alerts, blazor doesn't have built in functionality as far as I know. *@

@inject Popups Popups
@inject NavigationManager NavigationManager

<h3><strong>Add a Task</strong></h3>
<EditForm Model=@_NewTask OnValidSubmit="@CreateTask">
    <ChildContent Context="formContext">
        @*This line took forever to figure out. Docs are awful.*@
        <div class="row mt-1">
            <label class="col-md-2">Task Name:</label>
            <input class="col-md-3" type="text" name="TaskName" @bind-value=_NewTask.TaskName />
        </div>
        <div class="row mt-1">
            <label class="col-md-2">Task Detail:</label>
            <InputTextArea class="col-md-3 h-75" rows="4" name="TaskDetail" @bind-Value=_NewTask.TaskDescription></InputTextArea>       @* Why is value capital here??? To get around regular tags? Annoying debug *@
        </div>
        <div class="row mt-1">
            <label class="col-md-2">Selected Users:</label>
            <label class="col-md-3">@allSelectedUsers</label>
            <button class="col-md-2 btn btn-primary" type="button" @onclick="ClearUsers">Clear Selected Users</button>
        </div>
        <div class="row mt-1">
            <label class="col-md-2">Assigned To:</label>
            <select id="dropdown" class="col-md-3" @bind=_SelectedUserId>
                <option value="">Select a User</option>
                @foreach (User user in _Users)
                {
                    <option value="@user.Id">@user.FirstName @user.LastName</option>
                }
            </select>
        </div>
        <div class="row mt-1">
            <span class="col-md-2"></span>
            <button class="col-md-3 btn btn-primary" type="button" @onclick="AddAnotherUser">Add Selected User</button>

        </div>

        @*A way to add more users*@
        <div class="row mt-3">
            <span class="col-md-2"></span>
            <button class="col-md-3 btn btn-danger" type="submit">Add Task</button>
        </div>
    </ChildContent>
</EditForm>

@code {
    public Models.Task _NewTask = new Models.Task();

    private int? _SelectedUserId = null;

    string allSelectedUsers = "";

    Dictionary<string, int?> selectedUsers = new Dictionary<string, int?>();

    public List<User> _Users;

    protected override void OnInitialized()
    {
        using (var context = new ToDoAppDbContext())
        {
            _Users = context.Users.ToList();
        }
    }

    private async void CreateTask()
    {
        try
        {
            using (var context = new ToDoAppDbContext())
            {
                if (selectedUsers.Count == 0)
                    _NewTask.Status = Models.Task.TaskProgress.Unassigned;
                else
                {
                    List<User> dbUsers = context.Users.ToList();

                    _NewTask.Status = Models.Task.TaskProgress.NoProgress;

                    List<User> mySelectedUsers = new List<User>();

                    List<TaskTeam> allAssignedUserTaskRecords = new List<TaskTeam>();

                    foreach (var user in selectedUsers)
                    {
                        User selectedUser = dbUsers.FirstOrDefault(x => x.Id == user.Value);
                        TaskTeam taskTeam = new TaskTeam();
                        taskTeam.User = selectedUser;
                        taskTeam.Task = _NewTask;
                        allAssignedUserTaskRecords.Add(taskTeam);
                    }

                    context.TaskTeams.AddRange(allAssignedUserTaskRecords);
                }
                // Save the task and team to the database

                context.Tasks.Add(_NewTask);

                await context.SaveChangesAsync();
            }

            await Popups.AlertPopup("Task submitted successfully.");

            NavigationManager.NavigateTo("/AllTasks", true);
        }
        catch
        {
            await Popups.AlertPopup("An error occurred on Task creation.");
        }
    }

    private void AddAnotherUser()
    {
        if (_SelectedUserId != null)
        {
            User user = _Users.FirstOrDefault(x => x.Id == _SelectedUserId);

            selectedUsers.Add($"{user.FirstName} {user.LastName}", user.Id);

            allSelectedUsers = "";

            foreach (var selectedUser in selectedUsers)
            {
                allSelectedUsers += $"{selectedUser.Key}, ";
            }

            allSelectedUsers = allSelectedUsers.Remove(allSelectedUsers.LastIndexOf(","));

            _Users.Remove(user);

            _SelectedUserId = null;
        }
    }

    private void ClearUsers()
    {
        allSelectedUsers = "";
        selectedUsers.Clear();

        using (var context = new ToDoAppDbContext())
        {
            _Users = context.Users.ToList();
        }

        _SelectedUserId = null;
    }

}
