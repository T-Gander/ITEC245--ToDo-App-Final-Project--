@page "/TaskDetails/{taskId:int}"       //Using routing parameters

@using ITEC245__ToDo_App_Final_Project__.Data;
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3><strong>Task Details</strong></h3>

@if (_Task != null)
{
    <div>
        <p><strong>Task ID:</strong> @_Task.TaskId</p>
        <p><strong>Task Name:</strong> @_Task.TaskName</p>
        <p><strong>Status:</strong> @_Task.Status</p>
        <p><strong>Assigned To:</strong> @_AssignedUsersString</p>
        <p><strong>Task Details:</strong></p>
        <p>@_Task.TaskDescription</p>
    </div>
    <div class="mb-5">
        @using(var context = new ToDoAppDbContext())
        {
            if (context.TaskTeams.Any(x => x.UserID == _UserID && x.TaskID == taskId) && _Task.Status != Models.Task.TaskProgress.Complete)
            {
                <button @onclick=AddReport class="btn btn-primary me-1">Add Report</button>
            }
        }
        <AuthorizeView Roles="Admin">
            <Authorized>
                <button @onclick=EditDetails class="btn btn-danger">Edit Details</button>
                <button @onclick=DeleteTask class="btn btn-danger">Delete</button>
            </Authorized>
        </AuthorizeView>
    </div>

    <h4><strong>Task Reports:</strong></h4>

    @foreach (var report in _PreviousReports)
    {
        <div class="row border border-primary rounded-2" style="border-color: rebeccapurple !important">
            <div class="col-md-4 mt-3">
                <p><strong>Report ID: </strong>@report.ReportId</p>   <!-- Make this a dropdown to change status? Or only update to in-progress? Only Admin can change to other options -->
                <p>@report.Report</p>
                <p><strong>Report By: </strong>@report.Reporter</p>
            </div>
        </div>
    }
}
else
{
    <p>Task not found.</p>
}

@code {
    [Parameter]
    public int taskId { get; set; }
    @* Tag needed to retrieve from url *@

    private Models.Task _Task;

    private List<Models.User> _AssignedUsers = new List<Models.User>();

    private string _AssignedUsersString = "";

    private ClaimsPrincipal user;

    List<Models.TaskReport> _PreviousReports;

    private int _UserID;

    protected override async void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        using(var context = new ToDoAppDbContext())
        {
            _UserID = context.Users.FirstOrDefault(x => x.Email == user.Identity.Name).Id;
            _Task = context.Tasks.FirstOrDefault(t => t.TaskId == taskId);
            _PreviousReports = context.TaskReports.Where(x => x.TaskID == taskId).ToList();
            _PreviousReports = _PreviousReports.OrderByDescending(x => x.ReportId).ToList();
            _AssignedUsers = context.TaskTeams.Where(x => x.TaskID == taskId).Select(x => x.User).ToList();

            for(int i = 0; i < _AssignedUsers.Count; i++)
            {
                if(_AssignedUsers.Count == 1)
                {
                    _AssignedUsersString = $"{_AssignedUsers[i].FirstName} {_AssignedUsers[i].LastName}";
                }
                else
                {
                    if(i == _AssignedUsers.Count - 1)
                    {
                        _AssignedUsersString += $"{_AssignedUsers[i].FirstName} {_AssignedUsers[i].LastName}";
                    }
                    else
                    {
                        _AssignedUsersString += $"{_AssignedUsers[i].FirstName} {_AssignedUsers[i].LastName}, ";
                    }
                }
            }
        }
    }

    private void EditDetails()
    {
        NavigationManager.NavigateTo($"/TaskDetails/EditDetails/{taskId}", true);
    }

    private void AddReport()
    {
        NavigationManager.NavigateTo($"/TaskReport/{taskId}/{_UserID}");
    }

    private void DeleteTask()
    {
        using (var context = new ToDoAppDbContext())
        {
            Models.Task _Task = context.Tasks.FirstOrDefault(x => x.TaskId == taskId);

            List<Models.TaskReport> reportsToDelete = context.TaskReports.Where(x => x.TaskID == taskId).ToList();
            context.TaskReports.RemoveRange(reportsToDelete);

            context.Tasks.Remove(_Task);
            context.SaveChanges();
        }

        NavigationManager.NavigateTo("/AllTasks", true);
    }
}
