@page "/TaskDetails/{taskId:int}"       //Using routing parameters

@using ITEC245__ToDo_App_Final_Project__.Data;

@inject NavigationManager NavigationManager

<h3>Task Details</h3>

@if (_Task != null)
{
    <div>
        <p><strong>Task ID:</strong> @_Task.TaskId</p>
        <p><strong>Task Name:</strong> @_Task.TaskName</p>
        <p><strong>Status:</strong> @_Task.Status</p>
        <p><strong>Task Details:</strong></p>
        <p>@_Task.TaskDescription</p>
    </div>
    <div>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <button @onclick=EditDetails class="btn btn-danger">Edit Details</button>
                <button @onclick=DeleteTask class="btn btn-danger">Delete</button>
            </Authorized>
        </AuthorizeView>
    </div>
}
else
{
    <p>Task not found.</p>
}

@code {
    [Parameter]
    public int taskId { get; set; }     @* Tag needed to retrieve from url *@

    private Models.Task _Task;

    protected override void OnInitialized()
    {
        using(var context = new ToDoAppDbContext())
        {
            _Task = context.Tasks.FirstOrDefault(t => t.TaskId == taskId);
        }
    }

    private void EditDetails()
    {
        NavigationManager.NavigateTo($"/TaskDetails/EditDetails/{taskId}", true);
    }

    private void DeleteTask()
    {
        using (var context = new ToDoAppDbContext())
        {
            Models.Task _Task = context.Tasks.FirstOrDefault(x => x.TaskId == taskId);

            List<Models.TaskReport> reportsToDelete = context.TaskReports.Where(x => x.TaskID == taskId).ToList();
            context.TaskReports.RemoveRange(reportsToDelete);

            context.Tasks.Remove(_Task);
            context.SaveChanges();
        }

        NavigationManager.NavigateTo("/AllTasks", true);
    }
}
