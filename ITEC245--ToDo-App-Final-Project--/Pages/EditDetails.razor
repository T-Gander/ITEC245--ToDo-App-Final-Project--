@page "/TaskDetails/EditDetails/{taskId:int}"

@using ITEC245__ToDo_App_Final_Project__.Data;
@using ITEC245__ToDo_App_Final_Project__.Models;

@inject Popups Popups
@inject NavigationManager NavigationManager

<h3>Edit Details for</h3>

<AuthorizeView Roles="Admin">
    <Authorized>
        @if (_Task != null)
        {
            <EditForm Model=@_Task OnValidSubmit="@EditTask">
                <ChildContent Context="formContext">
                    @*This line took forever to figure out. Docs are awful.*@
                    <div class="row mt-1">
                        <label class="col-md-2">Task Name:</label>
                        <input class="col-md-3" type="text" name="TaskName" @bind-value=_Task.TaskName />
                    </div>
                    <div class="row mt-1">
                        <label class="col-md-2">Task Detail:</label>
                        <InputTextArea class="col-md-3 h-75" rows="4" name="TaskDetail" @bind-Value=_Task.TaskDescription></InputTextArea>      
                    </div>
                    <div class="row mt-1">
                        <label class="col-md-2">Task Status:</label>
                        <select id="dropdown" class="col-md-3" @bind=_Task.Status>
                            @foreach(Models.Task.TaskProgress tprogress in _ProgressTypes)
                            {
                                <option value="@tprogress">@tprogress.ToString()</option>
                            }
                        </select>
                    </div>
                    <div class="row mt-1">
                        <label class="col-md-2">Selected Users:</label>
                        <label class="col-md-3">@allSelectedUsers</label>
                        <button class="col-md-2 btn btn-primary" type="button" @onclick="ClearUsers">Clear Selected Users</button>
                    </div>
                    <div class="row mt-1">
                        <label class="col-md-2">Assigned To:</label>
                        <select id="dropdown" class="col-md-3" @bind=_SelectedUserId>
                            <option value="">Select a User</option>
                            @foreach (User user in _Users)
                            {
                                <option value="@user.Id">@user.FirstName @user.LastName</option>
                            }
                        </select>
                    </div>
                    <div class="row mt-1">
                        <span class="col-md-2"></span>
                        <button class="col-md-3 btn btn-primary" type="button" @onclick="AddAnotherUser">Add Selected User</button>
                    </div>

                    @*A way to add more users*@
                    <div class="row mt-3">
                        <span class="col-md-2"></span>
                        <button class="col-md-3 btn btn-danger" type="submit">Edit Task</button>
                    </div>
                </ChildContent>
            </EditForm>
            <button class="btn btn-danger" @onclick=DeleteTask>Delete Task</button>
        }
        else
        {
            <p>Task not found.</p>
        }
    </Authorized>
    <NotAuthorized>
        <div>
            <p>You aren't authorized to view this page.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int taskId { get; set; }     @* Tag needed to retrieve from url *@

    private Models.Task _Task;

    private List<Models.Task.TaskProgress> _ProgressTypes = new List<Models.Task.TaskProgress>();

    private int? _SelectedUserId = null;

    string allSelectedUsers = "";

    private List<User> _Users;

    Dictionary<string, int?> selectedUsers = new Dictionary<string, int?>();

    protected override void OnInitialized()
    {
        //Probably need to retrieve currently selected users.

        using (var context = new ToDoAppDbContext())
        {
            _Users = context.Users.ToList();
            _Task = context.Tasks.FirstOrDefault(t => t.TaskId == taskId);
        }
        _ProgressTypes.AddRange((Models.Task.TaskProgress[])Enum.GetValues(typeof(Models.Task.TaskProgress)));      //Kinda gross syntax, but adds all of the types contained in TaskProgress to a list.
    }

    private async void DeleteTask()
    {
        using(var context = new ToDoAppDbContext())
        {
            context.TaskReports.RemoveRange(context.TaskReports.Where(x => x.TaskID == taskId));
            context.TaskTeams.RemoveRange(context.TaskTeams.Where(x => x.TaskID == taskId));
            context.Tasks.Remove(context.Tasks.FirstOrDefault(x => x.TaskId == taskId));

            context.SaveChanges();
        }

        await Popups.AlertPopup("Task deleted successfully.");

        NavigationManager.NavigateTo("/AllTasks", true);
    }

    private void AddAnotherUser()
    {
        if (_SelectedUserId != null)
        {
            User user = _Users.FirstOrDefault(x => x.Id == _SelectedUserId);

            selectedUsers.Add($"{user.FirstName} {user.LastName}", user.Id);

            allSelectedUsers = "";

            foreach (var selectedUser in selectedUsers)
            {
                allSelectedUsers += $"{selectedUser.Key}, ";
            }

            allSelectedUsers = allSelectedUsers.Remove(allSelectedUsers.LastIndexOf(","));

            _Users.Remove(user);

            _SelectedUserId = null;
        }
    }

    private void ClearUsers()
    {
        allSelectedUsers = "";
        selectedUsers.Clear();

        using (var context = new ToDoAppDbContext())
        {
            _Users = context.Users.ToList();
        }

        _SelectedUserId = null;
    }

    private async void EditTask()
    {
        try
        {
            using (var context = new ToDoAppDbContext())
            {
                List<User> dbUsers = context.Users.ToList();

                List<User> mySelectedUsers = new List<User>();

                List<TaskTeam> allAssignedUserTaskRecords = new List<TaskTeam>();

                //Clear current task teams.
                context.TaskTeams.RemoveRange(context.TaskTeams.Where(x => x.TaskID == taskId));

                foreach (var user in selectedUsers)
                {
                    User selectedUser = dbUsers.FirstOrDefault(x => x.Id == user.Value);
                    TaskTeam taskTeam = new TaskTeam();
                    taskTeam.User = selectedUser;
                    taskTeam.TaskID = _Task.TaskId;
                    allAssignedUserTaskRecords.Add(taskTeam);
                }

                Models.Task _TaskToEdit = context.Tasks.FirstOrDefault(x => x.TaskId == taskId);
                _TaskToEdit.TaskName = _Task.TaskName;
                _TaskToEdit.TaskDescription = _Task.TaskDescription;
                _TaskToEdit.Status = _Task.Status;

                context.TaskTeams.AddRange(allAssignedUserTaskRecords);
                // Save the task and team to the database

                await context.SaveChangesAsync();
            }

            await Popups.AlertPopup("Task edited successfully.");

            NavigationManager.NavigateTo("/AllTasks", true);
        }
        catch
        {
            await Popups.AlertPopup("An error occurred on Task edit.");
        }
    }
}
